[{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU Affero General Public License","title":"GNU Affero General Public License","text":"Version 3, 19 November 2007 Copyright (C) 2007 Free Software Foundation, Inc. <https://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU Affero General Public License","text":"GNU Affero General Public License free, copyleft license software kinds works, specifically designed ensure cooperation community case network server software. licenses software practical works designed take away freedom share change works. contrast, General Public Licenses intended guarantee freedom share change versions program–make sure remains free software users. speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. Developers use General Public Licenses protect rights two steps: (1) assert copyright software, (2) offer License gives legal permission copy, distribute /modify software. secondary benefit defending users’ freedom improvements made alternate versions program, receive widespread use, become available developers incorporate. Many developers free software heartened encouraged resulting cooperation. However, case software used network servers, result may fail come . GNU General Public License permits making modified version letting public access server without ever releasing source code public. GNU Affero General Public License designed specifically ensure , cases, modified source code becomes available community. requires operator network server provide source code modified version running users server. Therefore, public use modified version, publicly accessible server, gives public access source code modified version. older license, called Affero General Public License published Affero, designed accomplish similar goals. different license, version Affero GPL, Affero released new version Affero GPL permits relicensing license. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions.","title":"GNU Affero General Public License","text":"“License” refers version 3 GNU Affero General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code.","title":"GNU Affero General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions.","title":"GNU Affero General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law.","title":"GNU Affero General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies.","title":"GNU Affero General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions.","title":"GNU Affero General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: work must carry prominent notices stating modified , giving relevant date. work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms.","title":"GNU Affero General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms.","title":"GNU Affero General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: Disclaiming warranty limiting liability differently terms sections 15 16 License; Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; Limiting use publicity purposes names licensors authors material; Declining grant rights trademark law use trade names, trademarks, service marks; Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination.","title":"GNU Affero General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies.","title":"GNU Affero General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients.","title":"GNU Affero General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents.","title":"GNU Affero General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom.","title":"GNU Affero General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"/LICENSE.html","id":"id_13-remote-network-interaction-use-with-the-gnu-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Remote Network Interaction; Use with the GNU General Public License.","title":"GNU Affero General Public License","text":"Notwithstanding provision License, modify Program, modified version must prominently offer users interacting remotely computer network (version supports interaction) opportunity receive Corresponding Source version providing access Corresponding Source network server charge, standard customary means facilitating copying software. Corresponding Source shall include Corresponding Source work covered version 3 GNU General Public License incorporated pursuant following paragraph. Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU General Public License single combined work, convey resulting work. terms License continue apply part covered work, work combined remain governed version 3 GNU General Public License.","code":""},{"path":"/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License.","title":"GNU Affero General Public License","text":"Free Software Foundation may publish revised /new versions GNU Affero General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU Affero General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU Affero General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU Affero General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty.","title":"GNU Affero General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability.","title":"GNU Affero General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16.","title":"GNU Affero General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU Affero General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. software can interact users remotely computer network, also make sure provides way users get source. example, program web application, interface display “Source” link leads users archive code. many ways offer source, different solutions better different programs; see section 13 specific requirements. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU AGPL, see https://www.gnu.org/licenses/.","code":"<one line to give the program's name and a brief idea of what it does.>     Copyright (C) <year>  <name of author>      This program is free software: you can redistribute it and/or modify     it under the terms of the GNU Affero General Public License as     published by the Free Software Foundation, either version 3 of the     License, or (at your option) any later version.      This program is distributed in the hope that it will be useful,     but WITHOUT ANY WARRANTY; without even the implied warranty of     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     GNU Affero General Public License for more details.      You should have received a copy of the GNU Affero General Public License     along with this program.  If not, see <https://www.gnu.org/licenses/>."},{"path":"/articles/multideploy.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Getting Started with multideploy","text":"multideploy package provides streamlined way deploy file changes across multiple GitHub repositories. Whether ’re managing standardized CI/CD configurations, common utility scripts, code style definitions, files consistent across repositories, multideploy helps automate process. vignette guide main functionality package practical examples.","code":""},{"path":"/articles/multideploy.html","id":"setup-and-authentication","dir":"Articles","previous_headings":"","what":"Setup and Authentication","title":"Getting Started with multideploy","text":"First, load multideploy package: using multideploy, need authenticate GitHub. package uses gh package authentication, looks GitHub Personal Access Token (PAT) GITHUB_PAT GITHUB_TOKEN environment variables. token can set directly within R script via: regular use, ’s recommended add PAT git credential system gitcreds package: Alternatively, can set PAT directly .Renviron file running: , type: PAT needs appropriate permissions access modify repositories. minimum, ’ll need: repo scope accessing private repositories workflow scope ’re modifying GitHub Actions workflows","code":"library(multideploy) # Set GitHub PAT (or better, use .Renviron) Sys.setenv(GITHUB_PAT = askpass::askpass(\"What is your GitHub Personal Access Token (PAT) ?\")) gitcreds::gitcreds_set() file.edit(\"~/.Renviron\") GITHUB_PAT=your_github_pat_here"},{"path":[]},{"path":"/articles/multideploy.html","id":"listing-repositories","dir":"Articles","previous_headings":"Managing Repositories","what":"Listing Repositories","title":"Getting Started with multideploy","text":"repos() function allows list repositories user organization:","code":"# List repositories for a user user_repos <- repos(\"username\")  # List repositories for an organization org_repos <- repos(\"orgname\", type = \"public\")  # Filter repositories by name pattern api_repos <- repos(\"orgname\", filter_regex = \"^api-\")  # View the repositories head(api_repos)"},{"path":"/articles/multideploy.html","id":"listing-organizations","dir":"Articles","previous_headings":"Managing Repositories","what":"Listing Organizations","title":"Getting Started with multideploy","text":"’re member multiple organizations, can list :","code":"my_orgs <- orgs() print(my_orgs)"},{"path":[]},{"path":"/articles/multideploy.html","id":"getting-file-content","dir":"Articles","previous_headings":"Working with Files","what":"Getting File Content","title":"Getting Started with multideploy","text":"can retrieve content file GitHub repository:","code":"# Get content of a file workflow_file <- file_content(\"username/repo\", \".github/workflows/ci.yml\")  # View the content cat(workflow_file$content)"},{"path":"/articles/multideploy.html","id":"creating-or-updating-files","dir":"Articles","previous_headings":"Working with Files","what":"Creating or Updating Files","title":"Getting Started with multideploy","text":"create update file repository:","code":"# Update a file result <- file_update(   repo = \"username/repo\",   path = \".github/workflows/ci.yml\",   content = \"updated workflow content...\",   message = \"Update CI workflow\" )"},{"path":"/articles/multideploy.html","id":"deploying-files-across-repositories","dir":"Articles","previous_headings":"","what":"Deploying Files Across Repositories","title":"Getting Started with multideploy","text":"core functionality multideploy deploying files across multiple repositories. can done two ways:","code":""},{"path":"/articles/multideploy.html","id":"direct-file-deployment","dir":"Articles","previous_headings":"Deploying Files Across Repositories","what":"Direct File Deployment","title":"Getting Started with multideploy","text":"Deploy single file multiple repositories:","code":"# Get repositories repos <- repos(\"orgname\", filter_regex = \"^api-\")  # Deploy a file to all repositories results <- file_deploy(   source_file = \"templates/ci.yml\",   target_path = \".github/workflows/ci.yml\",   repos = repos,   commit_message = \"Standardize CI workflow\" )  # View deployment results print(results)"},{"path":"/articles/multideploy.html","id":"creating-pull-requests","dir":"Articles","previous_headings":"Deploying Files Across Repositories","what":"Creating Pull Requests","title":"Getting Started with multideploy","text":"changes require review, can create pull requests:","code":"# Create a mapping of files to deploy mapping <- file_mapping(   \"templates/ci.yml\" = \".github/workflows/ci.yml\",   \"templates/lint.R\" = \".lintr\",   \"templates/codeowners\" = \".github/CODEOWNERS\" )  # Create pull requests with these changes pr_results <- pr_create(   repos = repos,   branch_name = \"feature/standardize-configs\",   title = \"Standardize repository configurations\",   body = \"This PR updates CI workflows, linting settings, and CODEOWNERS file to match organization standards.\",   file_mapping = mapping )  # View PR creation results print(pr_results)"},{"path":[]},{"path":"/articles/multideploy.html","id":"deploying-files-with-directory-structure","dir":"Articles","previous_headings":"Advanced Use Cases","what":"Deploying Files with Directory Structure","title":"Getting Started with multideploy","text":"can deploy files directory preserving structure:","code":"# Create mapping from a directory workflow_mapping <- file_mapping(   dir = \"templates/workflows\",   pattern = \"\\\\.ya?ml$\",   target_prefix = \".github/workflows/\",   preserve_structure = TRUE )  # Use this mapping to create PRs pr_create(   repos = repos,   branch_name = \"feature/update-workflows\",   title = \"Update all workflow files\",   body = \"Standardize all GitHub Actions workflow files\",   file_mapping = workflow_mapping )"},{"path":"/articles/multideploy.html","id":"dry-run-mode","dir":"Articles","previous_headings":"Advanced Use Cases","what":"Dry Run Mode","title":"Getting Started with multideploy","text":"making actual changes, can preview using dry run mode:","code":"# Preview file deployment without making changes dry_results <- file_deploy(   source_file = \"templates/ci.yml\",   target_path = \".github/workflows/ci.yml\",   repos = repos,   dry_run = TRUE )  # View what would happen print(dry_results)"},{"path":"/articles/multideploy.html","id":"filtering-and-targeting-repositories","dir":"Articles","previous_headings":"Advanced Use Cases","what":"Filtering and Targeting Repositories","title":"Getting Started with multideploy","text":"can combine repository filtering deployment target specific subsets repositories:","code":"# Get all organization repositories all_repos <- repos(\"orgname\")  # Filter to only Java repositories r_repos <- all_repos[grepl(\"r\", all_repos$name), ]  # Deploy R-specific configuration file_deploy(   source_file = \"templates/R/.Rbuildignore\",   target_path = \".Rbuildignore\",   repos = r_repos )  # Filter to only Python repositories python_repos <- all_repos[grepl(\"python\", all_repos$name), ]  # Deploy Python-specific configuration file_deploy(   source_file = \"templates/python/pylintrc\",   target_path = \".pylintrc\",   repos = python_repos )"},{"path":"/articles/multideploy.html","id":"recommendations","dir":"Articles","previous_headings":"","what":"Recommendations","title":"Getting Started with multideploy","text":"’re deploying files across multiple repositories, recommend taking consideration following: Start dry runs: Always use dry_run = TRUE first preview changes. Use meaningful commit messages: Include context change made. Consider PR approach significant changes: Use pr_create() instead direct commits changes might need review. Store templates version control: Keep template files repository. Create deployment script: regular deployments, create R script can run repeatedly.","code":""},{"path":"/articles/multideploy.html","id":"deployment-script-example","dir":"Articles","previous_headings":"","what":"Deployment Script Example","title":"Getting Started with multideploy","text":"Regarding last recommendation, can create deployment script automates process updating files across multiple repositories. ’s example script updates CI/CD workflows deploys configuration files repositories organization: want deploy files directly without creating pull requests, can use following snippet directly deploy configuration files:","code":"library(multideploy)  # Get repositories api_repos <- repos(\"my-organization\", filter_regex = \"^api-\") service_repos <- repos(\"my-organization\", filter_regex = \"^service-\") all_repos <- rbind(api_repos, service_repos)  # Create file mappings workflow_mapping <- file_mapping(   dir = \"templates/workflows\",   pattern = \"\\\\.ya?ml$\",   target_prefix = \".github/workflows/\",   preserve_structure = TRUE )  config_mapping <- file_mapping(   \"templates/.lintr\" = \".lintr\",   \"templates/.editorconfig\" = \".editorconfig\",   \"templates/CONTRIBUTING.md\" = \"CONTRIBUTING.md\" )  # Create PRs for workflow changes pr_create(   repos = all_repos,   branch_name = \"chore/update-workflows\",   title = \"Update CI/CD workflows\",   body = \"Update workflows to organization standards\",   file_mapping = workflow_mapping,   dry_run = FALSE ) # Directly deploy config files for (local_file in names(config_mapping)) {   target_path <- config_mapping[[local_file]]      file_deploy(     source_file = local_file,     target_path = target_path,     repos = all_repos,     commit_message = paste(\"Update\", basename(target_path), \"to organization standards\"),     dry_run = FALSE   ) }"},{"path":"/articles/multideploy.html","id":"fin","dir":"Articles","previous_headings":"","what":"Fin","title":"Getting Started with multideploy","text":"multideploy package streamlines process maintaining consistent files across multiple GitHub repositories. automating deployment, can ensure standardization saving significant time effort.","code":""},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"James Joseph Balamuta. Author, maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Balamuta J (2025). multideploy: Deploy File Changes Across Multiple GitHub Repositories. R package version 0.1.0, https://github.com/coatless-rpkg/multideploy, https://r-pkg.thecoatlessprofessor.com/multideploy/.","code":"@Manual{,   title = {multideploy: Deploy File Changes Across Multiple GitHub Repositories},   author = {James Joseph Balamuta},   year = {2025},   note = {R package version 0.1.0, https://github.com/coatless-rpkg/multideploy},   url = {https://r-pkg.thecoatlessprofessor.com/multideploy/}, }"},{"path":[]},{"path":"/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Deploy File Changes Across Multiple GitHub Repositories","text":"multideploy package provides tools deploying file changes across multiple GitHub repositories. ’s designed help manage standardized configurations, CI/CD workflows, common files need synchronized across multiple repositories.","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Deploy File Changes Across Multiple GitHub Repositories","text":"can install development version multideploy GitHub :","code":"# install.packages(\"remotes\") remotes::install_github(\"coatless-rpkg/multideploy\")"},{"path":"/index.html","id":"authentication","dir":"","previous_headings":"","what":"Authentication","title":"Deploy File Changes Across Multiple GitHub Repositories","text":"multideploy uses gh package GitHub API authentication querying. using multideploy, make sure GitHub Personal Access Token (PAT) set : ’s recommended store PAT .Renviron file rather code.","code":"# Set GitHub PAT (or use .Renviron) Sys.setenv(GITHUB_PAT = askpass::askpass(\"What is your GitHub Personal Access Token (PAT)?\"))"},{"path":"/index.html","id":"quick-start-example","dir":"","previous_headings":"","what":"Quick Start Example","title":"Deploy File Changes Across Multiple GitHub Repositories","text":"’s example showing deploy standardized CI workflow file multiple repositories using multideploy: [!IMPORTANT] GitHub PAT used authentication must necessary permissions access modify repositories’ workflows.","code":"library(multideploy)  # List repositories in an organization matching a pattern repos <- repos(\"my-organization\", filter_regex = \"^api-\")  # Deploy a CI workflow file to the selected repositories results <- file_deploy(   source_file = \"templates/check-standard.yml\",   target_path = \".github/workflows/R-CMD-check.yaml\",   repos = repos )  # View results print(results)"},{"path":"/index.html","id":"extended-overview","dir":"","previous_headings":"","what":"Extended Overview","title":"Deploy File Changes Across Multiple GitHub Repositories","text":"’re looking detailed examples use multideploy, step additional features package within section.","code":""},{"path":"/index.html","id":"repository-selection","dir":"","previous_headings":"Extended Overview","what":"Repository Selection","title":"Deploy File Changes Across Multiple GitHub Repositories","text":"List filter repositories across users organizations:","code":"# Get all public repositories for a user user_repos <- repos(\"username\", type = \"public\")  # Get repositories for an organization matching a pattern org_repos <- repos(\"orgname\", filter_regex = \"^data-\")  # List organizations you have access to my_orgs <- orgs()"},{"path":"/index.html","id":"file-deployment","dir":"","previous_headings":"Extended Overview","what":"File Deployment","title":"Deploy File Changes Across Multiple GitHub Repositories","text":"Deploy individual files sets files multiple repositories:","code":"# Deploy a single file file_deploy(\"local/path/file.R\", \"remote/path/file.R\", repos)  # Create a mapping of multiple files mapping <- file_mapping(   \"local/lint.R\" = \".lintr\",   \"local/gitignore\" = \".gitignore\",   dir = \"templates/workflows\",   pattern = \"\\\\.ya?ml$\",   target_prefix = \".github/workflows/\" )  # Create pull requests with multiple file changes pr_create(   repos = repos,   branch_name = \"feature/standardize-workflows\",   title = \"Standardize CI workflows\",   body = \"Implements organization-wide CI workflow standards\",   file_mapping = mapping )"},{"path":"/index.html","id":"dry-run-mode","dir":"","previous_headings":"Extended Overview","what":"Dry Run Mode","title":"Deploy File Changes Across Multiple GitHub Repositories","text":"Preview changes making :","code":"# Preview changes without making them file_deploy(\"local/file.R\", \"remote/file.R\", repos, dry_run = TRUE)  # Preview PR creation pr_create(repos, \"branch-name\", \"PR Title\", \"PR Body\", mapping, dry_run = TRUE)"},{"path":"/index.html","id":"license","dir":"","previous_headings":"","what":"License","title":"Deploy File Changes Across Multiple GitHub Repositories","text":"AGPL (>= 3)","code":""},{"path":"/reference/file_content.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve the content of a file from a GitHub repository — file_content","title":"Retrieve the content of a file from a GitHub repository — file_content","text":"function fetches file GitHub repository returns content SHA. file retrieved, returns NULL optionally displays warning message.","code":""},{"path":"/reference/file_content.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve the content of a file from a GitHub repository — file_content","text":"","code":"file_content(repo, path, ref = NULL)"},{"path":"/reference/file_content.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve the content of a file from a GitHub repository — file_content","text":"repo Character string specifying full name repository (format: \"owner/repo\") path Character string specifying path file within repository ref Character string specifying branch name, tag, commit SHA. Default NULL (uses default branch).","code":""},{"path":"/reference/file_content.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve the content of a file from a GitHub repository — file_content","text":"successful, returns list two elements: content Character string containing decoded file content sha Character string file's blob SHA use update operations file retrieved (e.g., exist access), returns NULL.","code":""},{"path":"/reference/file_content.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve the content of a file from a GitHub repository — file_content","text":"","code":"if (FALSE) { # interactive() # Get content from default branch file_info <- file_content(\"username/repository\", \"path/to/file.R\") if (!is.null(file_info)) {   # Access the content and SHA   content <- file_info$content   sha <- file_info$sha }  # Get content from specific branch file_info <- file_content(\"username/repository\", \"path/to/file.R\", ref = \"develop\")  # Suppress warnings file_info <- file_content(\"username/repository\", \"path/to/file.R\") }"},{"path":"/reference/file_deploy.html","id":null,"dir":"Reference","previous_headings":"","what":"Deploy a file to multiple GitHub repositories — file_deploy","title":"Deploy a file to multiple GitHub repositories — file_deploy","text":"function deploys local file multiple GitHub repositories. can create new files update existing ones, provides detailed status reporting operation.","code":""},{"path":"/reference/file_deploy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Deploy a file to multiple GitHub repositories — file_deploy","text":"","code":"file_deploy(   source_file,   target_path,   repos,   commit_message = NULL,   branch = NULL,   create_if_missing = TRUE,   dry_run = FALSE,   quiet = FALSE )"},{"path":"/reference/file_deploy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Deploy a file to multiple GitHub repositories — file_deploy","text":"source_file Character string specifying local file path deploy target_path Character string specifying path repositories file placed repos Data frame repositories returned repos() function, least full_name column commit_message Character string commit message. Default automatically generates message. branch Character string specifying branch name. Default NULL (uses default branch). create_if_missing Logical indicating whether create file exist. Default TRUE. dry_run Logical indicating whether simulate changes without making actual commits. Default FALSE. quiet Logical; TRUE, suppresses progress status messages. Default FALSE.","code":""},{"path":"/reference/file_deploy.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Deploy a file to multiple GitHub repositories — file_deploy","text":"Returns data.frame class \"file_deploy_result\" containing following columns: repository Character, full repository name (owner/repo) status Character, indicating operation result one values: \"created\", \"updated\", \"unchanged\", \"skipped\", \"error\", \"would_create\", \"would_update\" message Character, description action taken error encountered","code":""},{"path":[]},{"path":"/reference/file_deploy.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Deploy a file to multiple GitHub repositories — file_deploy","text":"","code":"if (FALSE) { # interactive() # Get list of repositories repositories <- repos(\"my-organization\")  # Deploy a workflow file to all repositories results <- file_deploy(   source_file = \"local/path/to/workflow.yml\",   target_path = \".github/workflows/ci.yml\",   repos = repositories )  # Filter to see only successfully updated repositories updated <- results[results$status == \"updated\", ]  # Check for any errors errors <- results[results$status == \"error\", ] }"},{"path":"/reference/file_mapping.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a file mapping for multi-repository deployment — file_mapping","title":"Create a file mapping for multi-repository deployment — file_mapping","text":"function builds mapping local files target paths repositories, supporting individual file mapping bulk directory processing.","code":""},{"path":"/reference/file_mapping.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a file mapping for multi-repository deployment — file_mapping","text":"","code":"file_mapping(   ...,   dir = NULL,   pattern = NULL,   target_prefix = \"\",   preserve_structure = FALSE,   quiet = FALSE )"},{"path":"/reference/file_mapping.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a file mapping for multi-repository deployment — file_mapping","text":"... Named arguments names local file paths values repository paths dir Character string specifying directory search files. Default NULL. pattern Character string regular expression pattern match files dir. Default NULL. target_prefix Character string prefix target paths. Default \"\". preserve_structure Logical indicating whether preserve directory structure target. Default FALSE. quiet Logical; TRUE, suppresses information messages. Default FALSE.","code":""},{"path":"/reference/file_mapping.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a file mapping for multi-repository deployment — file_mapping","text":"Returns object class \"file_mapping\" (just marked \"list\") containing: named list entry maps local file path (name) target repository path (value) key full path local file value corresponding path file placed repositories","code":""},{"path":"/reference/file_mapping.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a file mapping for multi-repository deployment — file_mapping","text":"dir argument requires valid directory path currently local filesystem. directory scanned files matching pattern regular expression, file mapped target path repositories. directory found, error thrown.","code":""},{"path":[]},{"path":"/reference/file_mapping.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a file mapping for multi-repository deployment — file_mapping","text":"","code":"# Map individual files with explicit source-to-target paths mapping <- file_mapping(   \"local/path/ci.yml\" = \".github/workflows/ci.yml\",   \"local/path/lint.R\" = \".lintr\" ) #> ! Local file does not exist: local/path/ci.yml #> ! Local file does not exist: local/path/lint.R #> ℹ Created file mapping with 2 files  # Automatically map all R files from a directory to backup/R2/ workflow_mapping <- file_mapping(   dir = system.file(package = \"multideploy\"),   pattern = \"\\\\.R$\",   target_prefix = \"backup/R2/\" ) #> ! No files found in directory /home/runner/work/_temp/Library/multideploy  # Preserve directory structure when mapping files template_mapping <- file_mapping(   dir = system.file(package = \"multideploy\"),   preserve_structure = TRUE ) #> ℹ Created file mapping with 20 files  # Combine explicit mappings with directory-based mappings combined_mapping <- file_mapping(   \"specific/file.R\" = \"R/functions.R\",   dir = system.file(package = \"multideploy\"),   target_prefix = \".github/\" ) #> ! Local file does not exist: specific/file.R #> ℹ Created file mapping with 21 files"},{"path":"/reference/file_update.html","id":null,"dir":"Reference","previous_headings":"","what":"Create or update a file in a GitHub repository — file_update","title":"Create or update a file in a GitHub repository — file_update","text":"function creates new file updates existing file GitHub repository. updating existing files, SHA current file must provided.","code":""},{"path":"/reference/file_update.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create or update a file in a GitHub repository — file_update","text":"","code":"file_update(   repo,   path,   content,   message,   branch = NULL,   sha = NULL,   quiet = FALSE )"},{"path":"/reference/file_update.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create or update a file in a GitHub repository — file_update","text":"repo Character string specifying full name repository (format: \"owner/repo\") path Character string specifying path file within repository content Character string new content file message Character string commit message branch Character string specifying branch name. Default NULL (uses default branch). sha Character string blob SHA file replaced. Required updating existing files; omit creating new files. Default NULL. quiet Logical; TRUE, suppresses progress status messages. Default FALSE.","code":""},{"path":"/reference/file_update.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create or update a file in a GitHub repository — file_update","text":"successful, returns list containing GitHub API response details commit, including: content Information updated file commit Details created commit operation fails (e.g., permission issues, invalid SHA), returns NULL.","code":""},{"path":"/reference/file_update.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create or update a file in a GitHub repository — file_update","text":"","code":"if (FALSE) { # interactive() # Create a new file result <- file_update(   repo = \"username/repository\",    path = \"path/to/new_file.R\",    content = \"# New R script\\n\\nprint('Hello world')\",    message = \"Add new script file\" ) # Check if operation was successful if (!is.null(result)) {   # Access commit information   commit_sha <- result$commit$sha }  # Update an existing file (requires SHA) file_info <- file_content(\"username/repository\", \"path/to/existing_file.R\") if (!is.null(file_info)) {   result <- file_update(     repo = \"username/repository\",      path = \"path/to/existing_file.R\",      content = \"# Updated content\\n\\nprint('Hello updated world')\",      message = \"Update file content\",     sha = file_info$sha   ) } }"},{"path":"/reference/multideploy-package.html","id":null,"dir":"Reference","previous_headings":"","what":"This package provides functions to deploy file changes across multiple GitHub repositories using the gh package. — multideploy-package","title":"This package provides functions to deploy file changes across multiple GitHub repositories using the gh package. — multideploy-package","text":"Provides functions deploy file changes across multiple GitHub repositories using GitHub API. Allows synchronizing common files, CI workflows, configurations across many repositories single command.","code":""},{"path":"/reference/multideploy-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"This package provides functions to deploy file changes across multiple GitHub repositories using the gh package. — multideploy-package","text":"Maintainer: James Joseph Balamuta james.balamuta@gmail.com (ORCID)","code":""},{"path":"/reference/orgs.html","id":null,"dir":"Reference","previous_headings":"","what":"List organizations for the authenticated user — orgs","title":"List organizations for the authenticated user — orgs","text":"function retrieves organizations associated currently authenticated GitHub user, options control pagination.","code":""},{"path":"/reference/orgs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List organizations for the authenticated user — orgs","text":"","code":"orgs(per_page = 100, max_pages = 5, quiet = FALSE)"},{"path":"/reference/orgs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List organizations for the authenticated user — orgs","text":"per_page Number organizations return per page. Default 100. max_pages Maximum number pages retrieve. Default 5. quiet Logical; TRUE, suppresses progress status messages. Default FALSE.","code":""},{"path":"/reference/orgs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List organizations for the authenticated user — orgs","text":"Returns data.frame organizations following columns: login Character, organization's username/login name url Character, API URL organization data.frame ordered returned GitHub API (typically alphabetically).","code":""},{"path":"/reference/orgs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List organizations for the authenticated user — orgs","text":"","code":"if (FALSE) { # interactive() # Get all organizations for the authenticated user my_orgs <- orgs()  # Retrieve silently without progress messages my_orgs <- orgs(quiet = TRUE)  # Extract just the organization names org_names <- orgs()$login }"},{"path":"/reference/pr_create.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a pull request for changes in multiple repositories — pr_create","title":"Create a pull request for changes in multiple repositories — pr_create","text":"function creates pull requests across multiple GitHub repositories, applying set file changes repository. can create new branches needed, add update files, open pull requests.","code":""},{"path":"/reference/pr_create.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a pull request for changes in multiple repositories — pr_create","text":"","code":"pr_create(   repos,   branch_name,   base_branch = NULL,   title,   body,   create_branch = TRUE,   file_mapping,   dry_run = FALSE,   quiet = FALSE )"},{"path":"/reference/pr_create.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a pull request for changes in multiple repositories — pr_create","text":"repos Data frame repositories returned repos(), least columns full_name default_branch branch_name Character string name branch create changes base_branch Character string name base branch. Default NULL (uses default branch). title Character string PR title body Character string PR description create_branch Logical indicating whether create branch exist. Default TRUE. file_mapping List mapping local file paths repository paths, created file_mapping() dry_run Logical indicating whether simulate changes. Default FALSE. quiet Logical; TRUE, suppresses progress status messages. Default FALSE.","code":""},{"path":"/reference/pr_create.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a pull request for changes in multiple repositories — pr_create","text":"Returns data.frame class \"pr_create_result\" containing following columns: repository Character, full repository name (owner/repo) pr_url Character, URL created pull request, NA PR created status Character, indicating operation result: \"created\", \"would_create\", \"skipped\", \"error\" message Character, description action taken error encountered","code":""},{"path":[]},{"path":"/reference/pr_create.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a pull request for changes in multiple repositories — pr_create","text":"","code":"if (FALSE) { # interactive() # Get repositories and create file mapping repositories <- repos(\"my-organization\") mapping <- file_mapping(   \"local/path/file1.R\" = \".github/workflows/ci.yml\",   \"local/path/file2.R\" = \"R/utils.R\" )  # Create pull requests in all repositories results <- pr_create(   repos = repositories,    branch_name = \"feature-branch\",    title = \"Update CI workflow\",    body = \"Standardizing CI workflow across repositories\",    file_mapping = mapping )  # Simulate without making actual changes dry_run_results <- pr_create(   repos = repositories,    branch_name = \"feature-branch\",    title = \"Update documentation\",    body = \"Updating documentation with new examples\",    file_mapping = mapping,   dry_run = TRUE )  # Only create PRs in repositories where the branch already exists existing_branch_results <- pr_create(   repos = repositories,    branch_name = \"existing-branch\",    title = \"Fix existing branch\",    body = \"Apply fixes to existing branch\",    file_mapping = mapping,   create_branch = FALSE ) }"},{"path":"/reference/print.file_deploy_result.html","id":null,"dir":"Reference","previous_headings":"","what":"Print method for ","title":"Print method for ","text":"method provides formatted summary file deployment results, showing counts status details errors encountered.","code":""},{"path":"/reference/print.file_deploy_result.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print method for ","text":"","code":"# S3 method for class 'file_deploy_result' print(x, ...)"},{"path":"/reference/print.file_deploy_result.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print method for ","text":"x object class \"file_deploy_result\" returned file_deploy() ... Additional arguments passed print methods (used)","code":""},{"path":"/reference/print.file_deploy_result.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print method for ","text":"Invisibly returns original input data frame unchanged. Displays formatted summary deployment results console.","code":""},{"path":"/reference/print.file_deploy_result.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print method for ","text":"","code":"if (FALSE) { # interactive() # Get list of repositories repositories <- repos(\"my-organization\")  # Deploy files results <- file_deploy(\"local/file.R\", \"remote/file.R\", repositories)  # Explicitly print the summary print(results) }"},{"path":"/reference/print.file_mapping.html","id":null,"dir":"Reference","previous_headings":"","what":"Print method for file_mapping objects — print.file_mapping","title":"Print method for file_mapping objects — print.file_mapping","text":"method provides formatted display file mappings, showing relationship local files target repository paths visual indicators file existence.","code":""},{"path":"/reference/print.file_mapping.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print method for file_mapping objects — print.file_mapping","text":"","code":"# S3 method for class 'file_mapping' print(x, max_files = 20, ...)"},{"path":"/reference/print.file_mapping.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print method for file_mapping objects — print.file_mapping","text":"x object class \"file_mapping\" returned file_mapping() max_files Maximum number files display. Default 20. ... Additional arguments passed print methods (used)","code":""},{"path":"/reference/print.file_mapping.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print method for file_mapping objects — print.file_mapping","text":"Invisibly returns original file_mapping object unchanged, allowing chained operations. Displays formatted representation mapping console, including: Total count mapped files Visual indicators showing local files exist (checkmark) missing (x) Source--target mapping file (limited max_files)","code":""},{"path":"/reference/print.file_mapping.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print method for file_mapping objects — print.file_mapping","text":"","code":"# Create and display a mapping mapping <- file_mapping(   \"R/functions.R\" = \"R/utils.R\",   dir = system.file(package = \"multideploy\") ) #> ! Local file does not exist: R/functions.R #> ℹ Created file mapping with 21 files # The mapping is automatically printed when not assigned  # Control how many files are displayed mapping <- file_mapping(dir = system.file(package = \"multideploy\")) #> ℹ Created file mapping with 20 files print(mapping, max_files = 5)  # Show only first 5 mappings #>  #> ── File Mapping ── #>  #> 20 files mapped for deployment #>  #> • ✔ /home/runner/work/_temp/Library/multideploy/DESCRIPTION → DESCRIPTION #> • ✔ /home/runner/work/_temp/Library/multideploy/INDEX → INDEX #> • ✔ /home/runner/work/_temp/Library/multideploy/Meta/Rd.rds → Rd.rds #> • ✔ /home/runner/work/_temp/Library/multideploy/Meta/features.rds → #> features.rds #> • ✔ /home/runner/work/_temp/Library/multideploy/Meta/hsearch.rds → hsearch.rds #>  #> Note: ✔ indicates file exists, ✖ indicates file not found #> ℹ ... and 15 more files not shown"},{"path":"/reference/print.pr_create_result.html","id":null,"dir":"Reference","previous_headings":"","what":"Print method for pr_create_result objects — print.pr_create_result","title":"Print method for pr_create_result objects — print.pr_create_result","text":"method provides formatted summary pull request creation results, showing counts status details created PRs errors encountered.","code":""},{"path":"/reference/print.pr_create_result.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print method for pr_create_result objects — print.pr_create_result","text":"","code":"# S3 method for class 'pr_create_result' print(x, ...)"},{"path":"/reference/print.pr_create_result.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print method for pr_create_result objects — print.pr_create_result","text":"x object class \"pr_create_result\" returned pr_create() ... Additional arguments passed print methods (used)","code":""},{"path":"/reference/print.pr_create_result.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print method for pr_create_result objects — print.pr_create_result","text":"Invisibly returns original input data frame (x) unchanged, allowing chained operations. function's primary purpose displaying formatted summary console, including: Counts PRs status (created, would_create, skipped, error) List successfully created PRs clickable URLs Details errors encountered process","code":""},{"path":"/reference/print.pr_create_result.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print method for pr_create_result objects — print.pr_create_result","text":"","code":"if (FALSE) { # interactive() # Create PRs results <- pr_create(   repos = repos(\"my-organization\"),   branch_name = \"feature-branch\",   title = \"Update configuration\",   body = \"Standardize configuration across repos\",   file_mapping = file_mapping(\"config.yml\" = \".github/config.yml\") )  print(results)  # Explicitly print the summary }"},{"path":"/reference/repos.html","id":null,"dir":"Reference","previous_headings":"","what":"List repositories for a user or organization — repos","title":"List repositories for a user or organization — repos","text":"function fetches repository information GitHub specified user organization, options filter limit results.","code":""},{"path":"/reference/repos.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List repositories for a user or organization — repos","text":"","code":"repos(   owner,   type = \"owner\",   per_page = 100,   max_pages = 10,   filter_regex = NULL,   quiet = FALSE )"},{"path":"/reference/repos.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List repositories for a user or organization — repos","text":"owner Character string specifying GitHub username organization name type Character string specifying type repositories list: \"\", \"owner\", \"public\", \"private\", \"member\". Default \"owner\". per_page Number repositories return per page. Default 100. max_pages Maximum number pages retrieve. Default 10. filter_regex Optional regular expression filter repositories name quiet Logical; TRUE, suppresses progress status messages. Default FALSE.","code":""},{"path":"/reference/repos.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List repositories for a user or organization — repos","text":"Returns data.frame repositories following columns: name Character, repository name without owner prefix full_name Character, complete repository identifier (owner/repo) default_branch Character, name default branch (e.g., \"main\" \"master\") private Logical, TRUE repository private, FALSE public","code":""},{"path":"/reference/repos.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List repositories for a user or organization — repos","text":"","code":"if (FALSE) { # interactive() # Get all repositories owned by a user user_repos <- repos(\"username\")  # Get only public repositories for an organization org_public_repos <- repos(\"orgname\", type = \"public\")  # Filter repositories by name pattern api_repos <- repos(\"orgname\", filter_regex = \"^api-\")  # Limit the number of fetched repositories limited_repos <- repos(\"large-org\", per_page = 50, max_pages = 2) }"}]
